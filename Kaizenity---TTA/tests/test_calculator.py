#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from calculator import Calculator
import unittest

class TestCalculator(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ Calculator"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.calc = Calculator()
    
    def test_add(self):
        """–¢–µ—Å—Ç —Å–ª–æ–∂–µ–Ω–∏—è"""
        self.assertEqual(self.calc.add(2, 3), 5)
        self.assertEqual(self.calc.add(-1, 1), 0)
        self.assertEqual(self.calc.add(0, 0), 0)
    
    def test_subtract(self):
        """–¢–µ—Å—Ç –≤—ã—á–∏—Ç–∞–Ω–∏—è"""
        self.assertEqual(self.calc.subtract(5, 3), 2)
        self.assertEqual(self.calc.subtract(1, 1), 0)
        self.assertEqual(self.calc.subtract(0, 5), -5)
    
    def test_multiply(self):
        """–¢–µ—Å—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è"""
        self.assertEqual(self.calc.multiply(2, 3), 6)
        self.assertEqual(self.calc.multiply(-2, 3), -6)
        self.assertEqual(self.calc.multiply(0, 5), 0)
    
    def test_divide(self):
        """–¢–µ—Å—Ç –¥–µ–ª–µ–Ω–∏—è"""
        self.assertEqual(self.calc.divide(6, 2), 3)
        self.assertEqual(self.calc.divide(5, 2), 2.5)
        self.assertEqual(self.calc.divide(0, 5), 0)
    
    def test_divide_by_zero(self):
        """–¢–µ—Å—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å"""
        with self.assertRaises(ValueError):
            self.calc.divide(5, 0)
    
    def test_history(self):
        """–¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"""
        self.calc.add(2, 3)
        self.calc.subtract(5, 2)
        
        history = self.calc.get_history()
        self.assertEqual(len(history), 2)
        self.assertIn("2 + 3 = 5", history)
        self.assertIn("5 - 2 = 3", history)
    
    def test_clear_history(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
        self.calc.add(2, 3)
        self.calc.clear_history()
        
        history = self.calc.get_history()
        self.assertEqual(len(history), 0)

def run_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞...")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(TestCalculator)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if result.wasSuccessful():
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\n‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã: {len(result.failures)} –æ—à–∏–±–æ–∫")
    
    return result.wasSuccessful()

if __name__ == "__main__":
    run_tests()
